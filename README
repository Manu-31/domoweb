   Première tentative de construction d'un petit jouet domotique.

Description générale
--------------------

   L'idée est de construire une interface intégrant un certain
nombre de modules. La notion de module est donc particulièrement
importante ici.

   Un module est un système (un aquarium, une piscine, ...) que
l'on va contrôler au travers de l'interface. Dans domoweb, un module
est une instance d'une classe (par exemple la classe aquarium).

Définir un type de module
-------------------------

   Pour définir un nouveau type de modules, il faut donc définir
une nouvelle classe. Elle doit hériter de la classe domoWebModule
et définir quelques attributs :

   . actions est un attribut de la classe qui donne la liste des
méthodes qu'il est légitime d'invoquer depuis l'interface web.

   . templateData() renvoie, pour un objet, un dictionnaire de
valeurs décrivant l'état du système correspondant. Ce seont ces
valeurs qui seront utilisées dans les pages web.


Definir un format d'affichage pour un module
--------------------------------------------

   L'affichage d'un module est défini au travers d'une page html
décrite dans le répertoire template. Toutes les variables fournies
par le module (au travers de la méthode templateData() ) sont
uilisables.

Les devices
-----------

   Dans domoweb, la notion de device couvre tous les périphériques
d'E/S permettant de lire des mesures ou de déclancher des
actions. Deux niveaux de devices sont définis : les devices de bas
niveau permettent d'utiliser le matériel réel (via de l'i2c, du 1
wire, ...) et les devices de haut niveau décrivent des fonctions un
peu plus abstraites (thermomètre, switch, ...)


Gestion des utilisateurs
------------------------

   Il est possible (mais non obligatoire) de se connecter à domoweb.
L'affichage dépend de l'utilisateur connecté.

   Les utilisateurs sont définis dans le fichier de config dans la
section [users]. L'utilisateur admin est automatiquement défini. Il
peut être redéfini dans le fichier de config de sorte à définir son
mot de passe.

   La visibilité de chaque module est définie dans la section de
configuration du module. Le mot clef readAccess définit une liste
des utilisateurs (séparés par une virgule) pouvant consulter le
module. Si readAccess = * alors le module est public, tout le monde
peut le consulter, même sans être connecté.

Le fichier de configuration
---------------------------

   Le fichier ~/.domoweb.cfg ou /etc/domoweb.cfg permet la
configuration pour l'utilisateur. Un exemple complet dans le
répertoire de domoweb est documenté. Le fichier contient les sections
suivantes

[debug] pour le debogage

[users] pour la définition des utilisateurs

[tabs] pour les modules à afficher


Les fichiers
------------

   domoweb.py
      Ne fait que charger et initialiser les modules.

   webui.py
      La gestion de l'interface Web

   domoWebModule.py
      Définition de la classe générale des modules et de quelques
classes de modules élémentaires

   domoWebSignIn.py

   Les modules
   -----------
   aquarium.py
   piscine.py

   Les devices
   -----------
   gpioDevice.py
   oneWireDevice.py
  
EN COURS
   . Automatiser les ajouts d'attributs : voir aquarium avec un premier
   essai. Il va falloir le reporter dans domoWebDevice. Du coup, on
   devrait pouvoir supprimer aquarium, piscine, ... 

   [templates]
   . utiliser w3.CSS ? Ou bootstrap, ...

URGENT
 
   . Faire une piscine utilisable et une en lecture seule, pour voir.
   On peut imaginer quel la version RO ne soit pas visble des utilisateurs
   qui ont l'autre. Ou que le html diffère pour la version publique, ...

   [user]
   
   . logguer les login/logout
 
A FAIRE

   [webui]
   . faire une page 'Accès restreint' ou juste un message ? Que faire
   quand on essaie d'accéder une ressources interdite ? Sachant que
   le point ci dessus devrait permettre de limiter.
   . remplacer templateData par readParameters et update par
   writeParameters et faire retourner un message d'erreur à ce dernier
   (utiliser des choses comme la route pouet) puis modifier les docs
   pour expliquer tout ça

   [general]
   . gpioDevice (en cours) pour utiliser dans aquarium 
   . Mettre des get/set pour les paramètres (les chercher dans les
attributs en fonction du nom fourni dans templateData ?)
   . Refaire la méthode templateData en faire un attribut de classe
comme actions ? Pas forcément car certains attributs peuvent varier
d'une instance à l'autre.
   . Sauvegarde dans une BD
   . Génération de courbes (highcharts ?)
   . Une page générée automatiquement dans laquelle apparaissent tous
les paramètres modifiables. Une première tentative est en cours
(datalist.html et route list). 

   [user]
   . mettre un nom et un identifiant
   . mots de passe chiffrés !

   [debug]
   . selection du niveau de log


FAIT
   [debug]
   . mise en page (table)

   [webui]
   . composer la liste des onglets en fonction de l'utilisateur

REFERENCES

   **Login**
   https://flask-login.readthedocs.io/en/latest/
   http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
   http://gouthamanbalaraman.com/blog/minimal-flask-login-example.html
   https://realpython.com/blog/python/introduction-to-flask-part-2-creating-a-login-page/
   
