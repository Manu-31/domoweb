LA MAINTENANT TOUT DE SUITE
   3. Démarrer le logbook
   5. Sauvegarder une copie, virer les vieilleries et git push

   DONE :
   1. Finir la version actuelle de la route /menu
   2. Clarifier le set/add/turn/get Attribute pour la suite
   4. Ne laisser que de l'interface web dans webui 

BUGS CONNUS A CORRIGER UN JOUR

   . remplacer html par template
   . La page par défaut est en dur /menu/aide : et si elle n'existe
   pas ? Ou est illisible ? Il faut une page de fallback toujours
   affichable et définir dans la config le module par défaut. Idée :
   une option de la section tabs, ou le premier module qui y est
   défini, ou le premier signin, ...
   . la page /list est accessible en permanence (oops!) mais montre
   des choses un peu étrange, ... à voir !
   . voir si on peut cumuler les fichiers de config, ce qui permettrait
   de mettre des sections 1wire, gpio, ... une fois pour toutes
   . Utiliser le "Message Flashing" de flask
   . la méthode module.templateData() est-elle vraiment utile ?
   . gérer le cas de la tab login : elle est affichée à droite. Ne
   pourrait-on pas la cacher à gauche ?
   . chiffrer les mots de passe
   . utiliser le login de flask
   . rendre les 'domoWebDataCache' plus conformes à la logique
   domoWebModule (nom, html, attributs,...)
   . Définir des constantes de classes qui peuvent être initialisées
   par le fichier de config et qui servent de valeur par défaut (eg
   température min, ...)
   . faire un "save" qui construit un fichier de config en fonction
   des valeurs actuelles (chaud !)
   . préprocesser le fichier de config par ninja2 ?

POUR ESSAYER DE M'EN SORTIR

*   . Bon, on en est au point de devoir éclaircir la gestion des
*   attributs. Est-ce que cette notion sert seulement à quelque-chose
*   !? Est-ce que s'il y a une ligne "attr = val" dans la section "mod"
*   il ne faut pas juste faire "mod.attr = val" !? Il faut préciser
*   tout ça, en n'oubliant pas la gestion de l'affichage, voire de
*   scripts par la suite. Une fois tout ça tiré au clair, les deux
*   points ci-dessous devraient suivre facilement. Attention, il y a
*   des attibuts spécifiques (readAccess, html, type, ...)
*
*   HINT ! voir ~/examples/generic.cfg et la notion de module générique
*
*   HINT ! Un point important est probablement la fonction d'affichage
*   (menu dans webui) qui construit notemment une liste de paramètres
*   transmis à la fonction de rendu construite à partir de la liste des
*   attributs.
*   L'idée serait d'utiliser la fonction module.getAttributes("nom")
*   comme c'est déjà le cas dans generic.html mais
*      . Ce n'est pas obligatoire : module.nom fonctionne aussi. A la
*   limite ce n'est pas dramatique : si on le fait, on ne perd pas
*   grand chose pour le moment que le les droits sont liés au module,
*   pas aux attibuts !
*      . Il faut voir comment modifier (a priori setAttribute()) et
*   comment utiliser des méthodes spécifiques. Pour ça, voir dans
*   webui.py la route pour /do/<modName>/<action>
*      
*   Donc pour le moment on part sur le principe suivant.
*
*   Les attributs sont ajoutés par le constructeur. Voir par exemple
*   celui de domoWebThermometer qui crée un attribut temperature. Ils
*   sont ensuite manipulables avec getAttribute() (voire avec des
*   getter et setter qui font le même travail, c'est-à-dire tester les
*   droits). La création du module depuis le fichier de config peut
*   également les manipuler.
*
*   FAIT : la même avec l'adresse (fait) puis idem avec le gpio.
*   C'est en cours. J'ai donc encore une version fondée sur les Actions
*   et je suis en train d'en faire une sur les attributs (voir
*   switchAction.html vs switchAttribute.html). Si on peut se passer
*   des actions, tout se fera à base d'attributs.
*
*   FAIT : on prend les droits en compte (en particulier dans la
*   route setAttribute et les fonctions invoquées)
*   A VOIR : le "all" ne semble pas fonctionner. Vérifier les droits
*   par défaut et la fonction qui teste les droits.

   A FAIRE : pour le moment, je ne teste pas les droits dans le code
   (voir par exemple setAttribute()) mais uniquement dans webui : je
   ne fais appel à une fonction (comme setAttribute()) que si
   l'utilisateur connecté en a le droit. Est-ce la bonne voie ?
   OUI, pour le moment ce suffit, MAIS A REDIGER !!
   
*   EN COURS : une version simple d'un aquarium, afin de faire un
*   premier tutoriel !? EN COURS, reste à simplifier un peu l'écriture
*   du html (invoquer des scripts déjà faits pour le thermomêtre et le
*   switch)

*   URGENT : Il est urgent de faire une page avec des paramètres
*   modifiables pour tester les POST et la méthode update(), ... Par
*   exemple une température min et une max sur un thermomètre ? Qui
*   déclencherait une action sur un switch. Ca permet de tout tester.
   
   A FAIRE : utiliser les sessions de flask afin de stocker le theme
   par exemple.
   
   ENSUITE : createModulesFromSection() pourrait renvoyer une liste
   des modules créés. Ainsi on pourrait avoir une liste des tab. Cela
   permettrait (1) de se passer de l'attribut 'hidden' et (2) de
   définir l'ordre des tabs comme étant l'ordre de cette liste. Avec
   le premier qui est celui affiché par défaut (attention, il peut
   changer en fonction de qui est connecté !)

*   ENSUITE : organiser les templates pour me permettre de faire des
*   essais avec différents framework de construction de site
*   (bootstrap, ...) et d'affichage de données (chartist, echarts, d3,
*   ...). Pour le moment, on peut se contenter de répertoires bien
*   rangés, ce sera déjà un bon début ! Parcequ'il y a deux aspects du
*   thème pas encore clairs pour moi : le static (css, ..) et les
*   templates (*.html), ...
   
   A FAIRE : en profiter peut être pour commencer à rédiger quelques
   lignes pour l'installation. Là apparemment il manque des polices,
   ...
   
   ENSUITE la prochaine étape est de supprimer les listes d'options
   par défaut (FAIT)

   temp = oneWireThermometer,28-0314640d3cff

   va devenir ( A FAIRE)
   
   temp = oneWireThermometer,address=28-0314640d3cff

   et les attributs sont parsés et positionnés explicitement avec leur
   nom, comme dans une section :
   [tp]
   type = oneWireThermometer
   address=28-0314640d3cff
   ...
   temp = tp
   
   Après, si au final il faut remplacer addAttribute (m, x, v) par
   m.x=v et y=m.getAttribute(x) par y=m.x, ce n'est pas un soucis !

   . Basculer la gestion des utilisateurs dans le fichier
   domoWebUser.py : au moins la gestion des listes
   d'utilisateurs. Pour ça, il faut d'abord éclaircir cette histoire
   de readUsers et readaccess : pourquoi ces deux listes qui ont l'air
   redondantes ?
  
   . Faire une petite page d'erreur sur laquelle basculer en cas de
   problème ou d'interdiction.
   
   . ajouter un mot-clef "all" dans le debug, ...
      oneWire.py       OK
      gpioDevice.py    OK
      webui.py         OK
   En profiter pour se faire une religion sur le mot-clef 'all' et
      documenter tout ça, ...
      
PROCHAINS CHANTIERS

   Les historiques : loguer les actions afin de pouvoir observer ce
   qui s'est passé : définir un objet logBook. Chaque setAttribute y
   inscrit une ligne.
   Les Tasks
   Les actions...

   
A METTRE AU PROPRE

   Les classe des modules héritent de domoWebModule. Chaque classe
contient une liste de méthodes utilisables via le web : actions.
Chaque module contient une liste d'attributs consultables/modifiables
par le web : domoWebAttributes.


Gestion de l'affichage
----------------------

   Mise en oeuvre dans le programme
   ................................
   
   L'affichage d'un module est réalisé par la fonction menu(modName)
du fichier webui.py. Le principe est simple :

   . On construit la liste des modules accessibles pour afficher le menu
   en haut page.
   . Le tableau associatif templateData est mis à jour en appelant la
   méthode templateData() du module à afficher
   . Le template associé au module est rendu
   
   Construction d'un template
   ..........................

   Dans un template, on a accès à

   . module qui est le module courant que l'on souhaite afficher. Ca
   je veux le supprimer dès que je trouve comment m'en passer !
   . Tous les éléments insérés dans templateData. C'est a priori par
   là que tout doit être manipulé.
   

----------------------








Première tentative de construction d'un petit jouet domotique.

Description générale
--------------------

   L'idée est de construire une interface intégrant un certain
nombre de modules. La notion de module est donc particulièrement
importante ici.

   Un module est un système (un aquarium, une piscine, ...) que
l'on va contrôler au travers de l'interface. Dans domoweb, un module
est une instance d'une classe (par exemple la classe aquarium).

Définir un type de module
-------------------------

   Pour définir un nouveau type de modules, il faut donc définir
une nouvelle classe. Elle doit hériter de la classe domoWebModule
et définir quelques attributs :

   . actions est un attribut de la classe qui donne la liste des
méthodes qu'il est légitime d'invoquer depuis l'interface web.

   . templateData() renvoie, pour un objet, un dictionnaire de
valeurs décrivant l'état du système correspondant. Ce seont ces
valeurs qui seront utilisées dans les pages web.


Definir un format d'affichage pour un module
--------------------------------------------

   L'affichage d'un module est défini au travers d'une page html
décrite dans le répertoire template. Toutes les variables fournies
par le module (au travers de la méthode templateData() ) sont
uilisables.

Les devices
-----------

   Dans domoweb, la notion de device couvre tous les périphériques
d'E/S permettant de lire des mesures ou de déclancher des
actions. Deux niveaux de devices sont définis : les devices de bas
niveau permettent d'utiliser le matériel réel (via de l'i2c, du 1
wire, ...) et les devices de haut niveau décrivent des fonctions un
peu plus abstraites (thermomètre, switch, ...)


Gestion des utilisateurs
------------------------

   Il est possible (mais non obligatoire) de se connecter à domoweb.
L'affichage dépend de l'utilisateur connecté.

   Les utilisateurs sont définis dans le fichier de config dans la
section [users]. L'utilisateur admin est automatiquement défini. Il
peut être redéfini dans le fichier de config de sorte à définir son
mot de passe.

   La visibilité de chaque module est définie dans la section de
configuration du module. Le mot clef readAccess définit une liste
des utilisateurs (séparés par une virgule) pouvant consulter le
module. Si readAccess = * alors le module est public, tout le monde
peut le consulter, même sans être connecté.

Le fichier de configuration
---------------------------

   Le fichier ~/.domoweb.cfg ou /etc/domoweb.cfg permet la
configuration pour l'utilisateur. Un exemple complet dans le
répertoire de domoweb est documenté. Le fichier contient les sections
suivantes

[debug] pour le debogage

[users] pour la définition des utilisateurs

[tabs] pour les modules à afficher


Les fichiers
------------

   domoweb.py
      Ne fait que charger et initialiser les modules.

   webui.py
      La gestion de l'interface Web

   domoWebModule.py
      Définition de la classe générale des modules et de quelques
classes de modules élémentaires

   domoWebSignIn.py

   Les modules
   -----------
   aquarium.py
   piscine.py

   Les devices
   -----------
   gpioDevice.py
   oneWireDevice.py
  
EN COURS
   . Il faut nettoyer et commenter tout ça, ça commence à prendre
   forme !
   . Faire une fonction 'menuTemplateData' pour ne pas la refaire à chaque
   fois ! Utiliser @app.context_processor ?

   . Faire un affichage de temperature, et un aquarium fondé sur
   generic, si ça passe, c'est bon !

. Voir que faire avec la liste d'attributs qu'on peut passer après
   le nom du type. L'idée est que chaque type a sa liste propre, comme
   l'adresse pour les thermomètres oneWire. Mais du coup, chaque type
   doit accepter un l= à son constructeur, ... On va partir de l'idée
   que c'est systématiquement le dernier paramètre, avec [] comme
   valeur par défaut.
   . Automatiser les ajouts d'attributs : voir aquarium avec un premier
   essai. Il va falloir le reporter dans domoWebModule. Du coup, on
   devrait pouvoir supprimer aquarium, piscine, ... Bon en fait pour
   le moment ce n'est pas très clair. Utiliser getattr/setattr est peu
   sûr (on peut interdire d'affecter des attributs existants).
   C'est tout de même comme ça que je fais pour le moment (voir
   domoWebModule). Reste le typage des attributs. Ils peuvent être
   typés explicitement pour les types "évolués" mais pour les autres ?
   L'absence de typage est elle un problème ou pas ?
JEN SUIS A ESSAYER creer les objets et leurs attributs dans webui.py
L'objectif est que tout hérite de domoWebModule

   Pour le moment, j'essai de mettre un setter sur les attributs de
   droit d'accès. Ca a l'air de pouvoir se faire, sauf que si le
   config parser est case insensitive, c'est bof !

   OK MAIS je fais quand même comme ça ! Attention avec les attributs
qui renvoient des choses qui ne s'affichent pas, ... comme les readUser
faut-il les mettre dans la liste ? Pas certain, ...

   Ensuite il faut basculer complètement là dessus.

   [templates]
   . utiliser w3.CSS ? Ou bootstrap, ...

URGENT
  
   . Faire une piscine utilisable et une en lecture seule, pour voir.
   On peut imaginer que la version RO ne soit pas visible des utilisateurs
   qui ont l'autre. Ou que le html diffère pour la version publique, ...

   . revoir la gestion de debugFlags
   [user]   
   . logguer les login/logout
 
A FAIRE

   [domoWebModule]
   . Permettre de passer des paramètres (par exemple venant d'un POST)
   à la méthode "templateData" de sorte à permettre d'agit sur
   certaines valeurs. Par exemple, on construira une liste de messages
   différente dans le logger en fonction des choix de l'utilisateur.
   
   [webui]
   . une page par défaut si pas de module aide (voir route("/"))
   . faire une page 'Accès restreint' ou juste un message ? Que faire
   quand on essaie d'accéder une ressources interdite ? Sachant que
   le point ci dessus devrait permettre de limiter.
   . remplacer templateData par readParameters et update par
   writeParameters et faire retourner un message d'erreur à ce dernier
   (utiliser des choses comme la route pouet) puis modifier les docs
   pour expliquer tout ça

   [general]
   . Refaire la méthode templateData en faire un attribut de classe
comme actions ? Pas forcément car certains attributs peuvent varier
d'une instance à l'autre.
   . Sauvegarde dans une BD
   . Génération de courbes (highcharts ?)
   . Une page générée automatiquement dans laquelle apparaissent tous
les paramètres modifiables. Une première tentative est en cours
(datalist.html et route list). 


   [debug]
   . selection du niveau de log


REFERENCES

   **Login**
   https://flask-login.readthedocs.io/en/latest/
   http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins
   http://gouthamanbalaraman.com/blog/minimal-flask-login-example.html
   https://realpython.com/blog/python/introduction-to-flask-part-2-creating-a-login-page/
   
